let mongoose,jwt,Joi,passwordComplexity;_bf8‍.x([["User",()=>User],["validate",()=>validate]]);_bf8‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_bf8‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_bf8‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_bf8‍.w("joi-password-complexity",[["default",["passwordComplexity"],function(v){passwordComplexity=v}]]);




const userSchema = mongoose.Schema(
  {
    firstName: { type: String, required: true },
    lastName: { type: String, required: true },
    email: { type: String, required: true },
    password: { type: String, required: true },
  },
  {
    collection: "users",
  }
);

userSchema.methods.generateAuthToken = function () {
  const token = jwt.sign({ _id: this._id }, process.env.SECRET, {
    expiresIn: "7d",
  });
  return token;
};

       const User = mongoose.model("user", userSchema);

       const validate = (data) => {
  const schema = Joi.object({
    firstName: Joi.string().required().label("First Name"),
    lastName: Joi.string().required().label("Last Name"),
    email: Joi.string().email().required().label("Email"),
    password: passwordComplexity().required().label("Password"),
  });
  return schema.validate(data);
};
